package org.jupi.springtoken;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;
import org.springframework.security.web.bind.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;

@Controller
public class TokenController {

    @Autowired
    private TokenUserDetailsService tokenUserDetailsService;

    /**
     * REST endpoint for Server-to-Server communication, to pre-authenticate the user.
     *
     * @param user Custom {@link org.jupi.springtoken.User} object, with name and age properties.
     * @return JSON response with the outcome of the call and with the generated token.
     */
    @ResponseBody
    @RequestMapping(value = SecurityConfig.CREATE_TOKEN_URL, method = RequestMethod.POST)
    public CreateTokenResponse createToken(@RequestBody User user) {
        String token = tokenUserDetailsService.createToken(user);
        return new CreateTokenResponse(token, true);
    }

    /**
     * Unauthorized page.
     *
     * @param model Spring MVC model
     * @return The corresponding View ID to the unauthorized page.
     */
    @ResponseStatus(HttpStatus.UNAUTHORIZED)
    @RequestMapping(SecurityConfig.ACCESS_DENIED_URL)
    public String unauthorized(Model model) {
        // Just some test data to be pre-filled for demonstration
        model.addAttribute("user", new User("Moriczka", 25));

        return "unauthorized";
    }

    /**
     * Authorize endpoint.
     * @param token A token generated by a server-to-server call.
     * @return Redirect to the index page.
     */
    @RequestMapping(value = SecurityConfig.AUTHORIZE_URL)
    public String authorize(@RequestParam String token) {
        if(!StringUtils.isEmpty(token)) {
            SecurityContextHolder.getContext().setAuthentication(new PreAuthenticatedAuthenticationToken(token, token));
        }
        return "redirect:/";
    }

    /**
     * Simple index page, showing the authenticated user and a logout button.
     * @param userDetails {@link org.springframework.security.core.userdetails.UserDetails} read from the HTTP session.
     * @param model Spring MVC model object
     * @return View ID of the index page.
     */
    @RequestMapping
    public String index(@AuthenticationPrincipal UserDetailsWrapper userDetails, Model model) {
        model.addAttribute("user", userDetails.getUser());
        return "user";
    }
}
